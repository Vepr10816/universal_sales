using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Options;

namespace Cackle.Identity.Telegram.UI.Areas.Identity.Pages.Account
{
    public class TelegramLoginModel : PageModel
    {
        private readonly TelegramLoginWidgetOptions _widgetOptions;

        /// <summary>
        ///     Populated WidgetModel provided to the page.
        /// </summary>
        public TelegramLoginWidgetModel WidgetModel;

        /// <summary>
        ///     Provides <see cref="TelegramLoginWidgetOptions" /> to the page.
        /// </summary>
        /// <param name="widgetOptions">TelegramLoginWidgetOptions provided by DI.</param>
        public TelegramLoginModel(IOptionsMonitor<TelegramLoginWidgetOptions> widgetOptions)
        {
            _widgetOptions = widgetOptions.CurrentValue;
        }

        /// <summary>
        ///     Passes Telegram Login Widget to the page to be used by the <see cref="TelegramLoginWidgetModel" /> partial page.
        /// </summary>
        /// <param name="redirectUri">Incoming URL parameter to pass to through to HandleRemoteAuthenticateAsync.</param>
        /// <param name="state">Incoming URL parameter generated by HandleChallengeAsync.</param>
        public void OnGet(string redirectUri = null, string state = null)
        {
            redirectUri ??= _widgetOptions.CallbackPath;
            var parameters = new Dictionary<string, string>
            {
                {"state", state}
            };

            _widgetOptions.CallbackPath = QueryHelpers.AddQueryString(redirectUri, parameters);

            // Create the TelegramLoginWidgetModel here to be elegantly passed to the partial page.
            WidgetModel = TelegramLoginWidgetModel.Configure(_widgetOptions);
        }
    }
}